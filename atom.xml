<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnny Happy&#39;s Blog</title>
  
  <subtitle>programer / freelancer / geek</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-05T10:22:17.378Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Johnny Happy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sticky shot privacy policy</title>
    <link href="http://yoursite.com/2020/05/05/sticky-shot-privacy-policy/"/>
    <id>http://yoursite.com/2020/05/05/sticky-shot-privacy-policy/</id>
    <published>2020-05-05T10:18:09.000Z</published>
    <updated>2020-05-05T10:22:17.378Z</updated>
    
    <content type="html"><![CDATA[<p>This Privacy Policy describes the practices of Johnnyhappy365 and its affiliates (“sticky short”), regarding the collection, use, disclosure, transfer and other processing of information about you collected as part of your use of the our services. Before using the this app, please carefully review this Privacy Policy. By using or accessing the this app, you agree that we may collect and use your information in accordance with this Privacy Policy.</p><p>Johnnyhappy365 (through itself or third parties) collects and accumulates anonymous data that helps us understand and analyze the experience of people visiting our web sites and, along with other information you provide, customize your future visits and improve our web sites. Data that we may collect includes: device characteristics (including device ID for mobile devices), operating system, browser type, IP address, username from stored cookies if present, dates and times of each login, page and image viewing statistics, and incoming and outgoing links. None of this information is “personal data” – that is, data we could use to identify a specific person. Some of this information could, however, become personal data because we provide automatically collected anonymous data to third party advertisers, and those third parties might be able to combine our anonymous data with other data they have to enable them to identify people.</p><p>We collect whatever personal data about you that you choose to give us, such as full name or a contact email address and profile information. We do not require you to use an account to upload images. We do not share, sell, or even show to anyone your name, email or profile information.</p><p>We reserve the right to release any user information if user has violated the Johnnyhappy365 Terms of Service, if the user has committed unlawful acts, if the information is subpoenaed, or if Johnnyhappy365 deems it necessary or appropriate.</p><p>We do not “collect” anything that you post: images, comments, messages, etc., and do not “process” or determine any purposes for processing of any information that you post. In particular, every image uploaded (even if it was uploaded to your gallery) to this website is public – whether uploaded directly without going through a user account, or uploaded via a user account – and has its own URL. Every image can always be accessed and viewed by anyone who types in that exact URL. No image uploaded to this website is ever completely hidden from public view. This is to ensure that this website will not be used as a platform for illegality. Functionality of our website is not intended to be a secure platform; it’s for sharing images. Your gallery is not intended for secure image storage, it is only intended for aggregating images that you post if you do it through a user account.</p><p>We may revise this privacy policy from time to time by posting the changes here.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Privacy Policy describes the practices of Johnnyhappy365 and its affiliates (“sticky short”), regarding the collection, use, disclos
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>多层次结构的数据可视化</title>
    <link href="http://yoursite.com/2020/03/30/hierarchy-visualization/"/>
    <id>http://yoursite.com/2020/03/30/hierarchy-visualization/</id>
    <published>2020-03-30T08:29:17.000Z</published>
    <updated>2020-03-30T10:12:30.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多层级结构"><a href="#多层级结构" class="headerlink" title="多层级结构"></a>多层级结构</h2><p>将大于等于 2 个层结构的数据叫作多层级数据结构。将此类进行数据可视化的时候，我们需要同时考虑如何将这种层级结构和指标同时进行展示。既要让用户看明白它的层次结构同时也要让用户看明白指标间的“对比”。本文介绍几种常见的可视化方法，并在最后给出一些综合的  对比分析。</p><h2 id="圆形方案"><a href="#圆形方案" class="headerlink" title="圆形方案"></a>圆形方案</h2><p><img src="/images/hierarchy_sunburst.png" alt="sunburst"></p><p>sunburst 是一种外观呈现圆形的方案。在图中最内层的表示第一级，依次往外。通过面积表示指标。</p><p>sunburst 与好像是多个 donut 图的组合，非常巧妙的把层级结构展现出来。但它也有自身的特点，圆形方案占用的留白特别多，造成宝贵的页面空间被浪费。如果是在 dashboard 这样原场景的话，可能会占用比较大的面积，从而影响不能承受其它图表的摆放。</p><h2 id="矩形方案"><a href="#矩形方案" class="headerlink" title="矩形方案"></a>矩形方案</h2><p><img src="/images/hierarchy_treemap.png" alt="sunburst"></p><p>treemap 与 sunburst 有点像的地方是也是使用面积来表示指标的大小。但它使用的布局算法类似使用了尝试优先的方式，将同一 parent 节点的叶子结点聚焦在一起展现。</p><p>treemap 的问题是不能最直观的看出一个多层级结构的关系。这个问题有几个方案可以解决：</p><ol><li>使用 tooltip 进行展示。如果显示这种关系的需求不是最核心的展示需求的话，可以使用 tooltip 的方式进行展示。</li><li><a href="https://observablehq.com/@d3/cascaded-treemap" target="_blank" rel="noopener">cascaded-treemap</a></li></ol><p><img src="/images/hierarchy_treemap2.png" alt="cascaded treemap"></p><h4 id="sunburst-vs-treemap"><a href="#sunburst-vs-treemap" class="headerlink" title="sunburst vs treemap"></a>sunburst vs treemap</h4><p>在 dashboard 的项目中，如果是层级非常少，且每个层级的孩子结节不多的情况下，我会考虑使用 sunburst。如果是相反的情况，使用 treemap 的空间利用率会更高一些。</p><h2 id="树形方案"><a href="#树形方案" class="headerlink" title="树形方案"></a>树形方案</h2><p><img src="/images/hierarchy_tree.png" alt="tree"></p><p>树形方案最主要的功能是把层次结构展示出来，在图的本身不太能有效的把指标展示出来。一种方法是在结点的 title 上，除了显示结点名，也可以把结点需要展示的指标显示出来。比如：小张（20 岁)。这里小张是结点名，20 岁是指标代表他的年龄。</p><p>另一种方法是配合其它的控件使用。tree 只做层级结构的展示，通过是用来做导航，然后在右侧或其它位置提供一个结节详细信息的展示和操作面板。此方案更适用于有明确的导航需求的场景，用户知道想要找的结点，然后找到并进行操作。并不适合数据探索的场景。</p><h2 id="网络形方案"><a href="#网络形方案" class="headerlink" title="网络形方案"></a>网络形方案</h2><p><img src="/images/hierarchy_network.png" alt="network graph"></p><p>网络图也可以展现层次结构，但可能更常见于展示更广泛意义上的网络结构。它的可视化元素有边和节点。所以通常可以使用节点的直径来表示指标（颜色也可以但不常见）。边更多的表示节点间关系，而不是指标的值。</p><p>网络图有一个问题是 title 的展示。如果不展示 title 的时候，更多的是分析宏观性。但展示 title 的时候呢，有可能是针对某个节点的具体分析了。这时，在布局的时候就要考虑尽量减少 title 文字重叠的情况。一是控制 title 的文字长度。另一是调整节点间的最小距离(限于使用 force-directed 布局算法)</p><h2 id="cheatsheet"><a href="#cheatsheet" class="headerlink" title="cheatsheet"></a>cheatsheet</h2><table><thead><tr><th></th><th>sunburst</th><th>treemap</th><th>cascaded treemap</th><th>tree</th><th>network</th></tr></thead><tbody><tr><td>层级少数据少</td><td>最适合</td><td></td><td></td><td></td><td>适合</td></tr><tr><td>层级多数据多</td><td></td><td>最适合</td><td>最适合</td><td></td><td></td></tr><tr><td>直观显示层级结构</td><td>适合</td><td></td><td>适合</td><td>最适合</td><td>适合</td></tr><tr><td>空间占用比</td><td></td><td>最适合</td><td>适合</td><td>适合</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多层级结构&quot;&gt;&lt;a href=&quot;#多层级结构&quot; class=&quot;headerlink&quot; title=&quot;多层级结构&quot;&gt;&lt;/a&gt;多层级结构&lt;/h2&gt;&lt;p&gt;将大于等于 2 个层结构的数据叫作多层级数据结构。将此类进行数据可视化的时候，我们需要同时考虑如何将这种层级结构和指
      
    
    </summary>
    
    
    
      <category term="hierarchy" scheme="http://yoursite.com/tags/hierarchy/"/>
    
      <category term="treemap" scheme="http://yoursite.com/tags/treemap/"/>
    
  </entry>
  
  <entry>
    <title>时间序列图的所有秘籍</title>
    <link href="http://yoursite.com/2020/03/19/time-series-chart/"/>
    <id>http://yoursite.com/2020/03/19/time-series-chart/</id>
    <published>2020-03-19T12:51:38.000Z</published>
    <updated>2020-03-20T04:47:06.194Z</updated>
    
    <content type="html"><![CDATA[<p>时间序列在数据可视化中比较常见，通过是表达随时间的变化(x 轴)指标(y 轴)是如何变化的。本文介绍一些在表示时间序列的时候的一些知识点和技巧，在最后给出一个 cheatsheet 可以快速查阅。</p><h2 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h2><p>时间序列通常是一个二维的图表，X 轴用来表示时间轴，Y 轴用来表示指标轴。比如在</p><a href="/2020/03/14/write-a-line-chart-using-d3/" title="一步一步用 D3js 写一个 Line Char">一步一步用 D3js 写一个 Line Char</a>介绍的 line chart<p><img src="/images/linechart__series.png" alt="line chart"></p><h4 id="x-轴"><a href="#x-轴" class="headerlink" title="x 轴"></a>x 轴</h4><p>通过使用线性的时间缩放，在 d3js 中可以使用 <code>scaleTime</code>来实现。时间显示的粒度通常要根据具体业务来确定，有的可以看年统计，也有的按小时统计。</p><p>另外，在显示 x 轴的 tick 的时候，因为日期的不同粒度以及不同的时间显示精度，经常是需要把 x 轴的时间做格式化的。如按天为粒度的时间序列图可以显示格式为<code>MM-DD</code>。</p><h4 id="y-轴"><a href="#y-轴" class="headerlink" title="y 轴"></a>y 轴</h4><p>y 轴通常用来表示指标，它可能是一个具体的数据记录也可能是聚合后的数据。有时，也会使用双 y 轴的情况，这时会显示两个 Series 分别用不同的 y 轴来解释。这种场景是为了强调二个指标随着同一段时间变化时的相关关系。</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><h4 id="离散数据与连续数据"><a href="#离散数据与连续数据" class="headerlink" title="离散数据与连续数据"></a>离散数据与连续数据</h4><p>离散数据是经常聚合后的数据，如每小时/天的 sum/avg 值等。</p><h2 id="Series-的表示形式"><a href="#Series-的表示形式" class="headerlink" title="Series 的表示形式"></a>Series 的表示形式</h2><p>下面说说数据序列，基于时间序列的指标展示有多种方式，每种方式有其特殊的适用场景。</p><h4 id="column-chart-柱形图-直方图"><a href="#column-chart-柱形图-直方图" class="headerlink" title="column chart 柱形图/直方图"></a>column chart 柱形图/直方图</h4><p>column chart 通常是用来显示聚合后的离散数据的。使用柱图可以强化柱之间的比较效果。</p><p><img src="/images/columnchart__series.png" alt="column chart"></p><h4 id="scatter-chart-散点图"><a href="#scatter-chart-散点图" class="headerlink" title="scatter chart/散点图"></a>scatter chart/散点图</h4><p>散点图最大的特点我觉得有二个，一是两个轴都是连续型的或数据型的。二是用小圆点来表示一个数据点。在这个二维平面上，散点图的最大的意义大于提示二个轴所代表的指标的几何意义。比如下图，两个指标就是就代表了两个指标是<code>正相关</code>的。<br><img src="/images/scatterchart__series.png" alt="scatter chart"><br>除了<code>正相关</code>散点图还可以表达<code>不相关</code>/<code>聚焦</code>/<code>负相关</code>等含义</p><h4 id="line-chart-折线图"><a href="#line-chart-折线图" class="headerlink" title="line chart/折线图"></a>line chart/折线图</h4><p>把 scatter chart 中的点用直线连接在一起就变成了 line chart。这种连接会在视觉上让用户更倾向于 y 轴数据的变化关系，而不再纠结与 x 与 y 轴的关系。</p><p>在 line chart 默认是使用直线的，有些图表库要支持使用 spline line 的方式来拟合。这种拟合其实是与实际的指标变化无关的，我觉得可能更多的是从美观度上的考虑。</p><h4 id="step-chart-阶梯图"><a href="#step-chart-阶梯图" class="headerlink" title="step chart/阶梯图"></a>step chart/阶梯图</h4><p>有时指标在一个不能在图表上再分的时间段内是固定不变的。如银行利率在很长一段时间是不会改变的。为了强调这种<code>不变</code>的关系。用 step chart 就非常适合。</p><p>step chart 在画 series 时也是使用<code>d3.line</code>进行绘制然后生成一个 path。区别是，在原有的数据点之外还要再补充一些点才能画出这种直角的感觉。<br>参考代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">initSeries() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">this</span>.config</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> stepData: DataItem[] = []</span><br><span class="line">    data.forEach(<span class="function">(<span class="params">d: DataItem, i: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">      stepData.push(d)</span><br><span class="line">      <span class="keyword">if</span> (i !== data.length - <span class="number">1</span>) &#123;</span><br><span class="line">        stepData.push(&#123;</span><br><span class="line">          x: data[i + <span class="number">1</span>].x,</span><br><span class="line">          y: d.y</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> line = d3</span><br><span class="line">      .line()</span><br><span class="line">      .x(<span class="function">(<span class="params">d: <span class="built_in">any</span>, i: <span class="built_in">number</span></span>) =&gt;</span> that.x(d.x))</span><br><span class="line">      .y(<span class="function">(<span class="params">d: <span class="built_in">any</span>, i: <span class="built_in">number</span></span>) =&gt;</span> that.y(d.y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.series = <span class="keyword">this</span>.svg</span><br><span class="line">      .append(<span class="string">'path'</span>)</span><br><span class="line">      .datum(stepData) <span class="comment">// 10. Binds data to the line</span></span><br><span class="line">      .attr(<span class="string">'class'</span>, <span class="string">'line'</span>) <span class="comment">// Assign a class for styling</span></span><br><span class="line">      .attr(<span class="string">'d'</span>, line)</span><br><span class="line">      .attr(<span class="string">'fill'</span>, <span class="string">'none'</span>)</span><br><span class="line">      .attr(<span class="string">'stroke'</span>, Colors.primary)</span><br><span class="line">      .attr(<span class="string">'stroke-width'</span>, <span class="number">3</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>d3js</code>提供了这种便利性，可以通过设置 curve 来实现, 效果是一样的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> line = d3</span><br><span class="line">  .line()</span><br><span class="line">  .x(<span class="function">(<span class="params">d: <span class="built_in">any</span>, i: <span class="built_in">number</span></span>) =&gt;</span> that.x(d.x))</span><br><span class="line">  .y(<span class="function">(<span class="params">d: <span class="built_in">any</span>, i: <span class="built_in">number</span></span>) =&gt;</span> that.y(d.y))</span><br><span class="line">  .curve(d3.curveStep)</span><br></pre></td></tr></table></figure><p><img src="/images/stepchart__series.png" alt="step chart"></p><h2 id="cheatsheet"><a href="#cheatsheet" class="headerlink" title="cheatsheet"></a>cheatsheet</h2><p>在时间序列的展示形式选择的时候可以参考这个 cheatsheet。</p><table><thead><tr><th></th><th>column</th><th>scatter</th><th>line</th><th>step</th></tr></thead><tbody><tr><td>离散数据</td><td>最适合</td><td>适合</td><td></td><td></td></tr><tr><td>连续数据</td><td></td><td>适合</td><td>适合</td><td>适合</td></tr><tr><td>时间段内数据不变</td><td></td><td></td><td></td><td>最适合</td></tr><tr><td>强调指标之间的对比</td><td>最适合</td><td></td><td></td><td></td></tr><tr><td>强调时间与指标指间的几何关系</td><td></td><td>最适合</td><td>适合</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间序列在数据可视化中比较常见，通过是表达随时间的变化(x 轴)指标(y 轴)是如何变化的。本文介绍一些在表示时间序列的时候的一些知识点和技巧，在最后给出一个 cheatsheet 可以快速查阅。&lt;/p&gt;
&lt;h2 id=&quot;二维&quot;&gt;&lt;a href=&quot;#二维&quot; class=&quot;h
      
    
    </summary>
    
    
    
      <category term="d3js" scheme="http://yoursite.com/tags/d3js/"/>
    
      <category term="数据可视化" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="时间序列" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>《奇特的一生》读书笔记</title>
    <link href="http://yoursite.com/2020/03/14/amazing-life-note-1/"/>
    <id>http://yoursite.com/2020/03/14/amazing-life-note-1/</id>
    <published>2020-03-14T15:28:07.000Z</published>
    <updated>2020-03-17T04:31:00.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编者的话"><a href="#编者的话" class="headerlink" title="编者的话"></a>编者的话</h2><p>读过编者的话这一章前内容，我有几个感受: 一是很久没看书了，时不时会心浮气燥。第二呢，这段时间自己也在写博客，深深的感觉到笔力的软弱，写下去就那么几个字，丝毫没有一点文采可言。第三呢，了解到一些之前我所不知道的事实。</p><p>这本书，没想到是第一批翻译出版的俄文书籍，而在当时 70 年代的时候还是非常热烈。在 2003 左右再版后，这本书对新一代的读者也是影响深远。在<a href="https://search.douban.com/book/subject_search?search_text=%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F&cat=1001" target="_blank" rel="noopener">豆瓣</a>上有近 1.4 万的评论。</p><p><strong>我希望像编者所说，通过再读本书能够受之启迪，思考我的一生应该怎样渡过。</strong></p><h2 id="第一章-评价的折中就是你在这个世界的价值"><a href="#第一章-评价的折中就是你在这个世界的价值" class="headerlink" title="第一章 评价的折中就是你在这个世界的价值"></a>第一章 评价的折中就是你在这个世界的价值</h2><p>作者没有一上来就说柳比歇夫是什么样的人，而是通过报告会上不同的发言人对他的描述和评价来一点一点的表达柳比歇夫的学术成就和为事为人。</p><p>每个人都只能看到了柳比歇夫的一个侧面。身在当今社会的我们也是一样，要想评价一个人，我们只看到了他一个侧面而已。一个惯性的动作是我们会把不同人的评论综合起来，然后“盖棺论定”给他一个“结论”。这样的“结论”是经过多方面“折中”的，折中成了一个大家都可以接受的版本。但这个版本是真实的柳比歇夫吗？是真相吗？肯定不是，最起码不完全是。但这个版本比事实  可能更具有社会意义，也更容易被传播。</p><p>同样的一段文字作家可以使用不同的手法来描述，可以写得引人入胜像小说一样精彩，也可以写的像字典一样规矩。作者在一开始就把写作这本书的立场交代出来，他要写一本能够使读者明白“如何能过更好的一生”。不得不说，这几个字深深的吸引了我…</p><h2 id="学术成就和遗产"><a href="#学术成就和遗产" class="headerlink" title="学术成就和遗产"></a>学术成就和遗产</h2><blockquote><p>柳比歇夫全名亚历山大·亚历山德罗维奇·柳比歇夫，是前苏联的昆虫学家、哲学家、数学家。从 26 岁到 82 岁这几十年间，他一共发表了七十多部学术著作，内容涵盖地蚤的分类、科学史、农业、遗传学、植物保护、昆虫学、动物学、进化论、无神论等众多领域。除了研究昆虫这个本职工作，柳比歇夫还自学了英文、德文和法文；谈起英国的君主制度，他能够说出任何一个英国国王的执政细节；说到宗教，不管是古兰经、犹太传经，还是罗马教廷的源流、毕达哥拉斯学派的思想，他都如数家珍。</p></blockquote><blockquote><p>很多人可能会觉得，柳比歇夫对于时间管理的严格执行，让他把自己变得像个固定的程序，但实际上，这个人还真不是没有人情味的人。这个人在学术上、在兴趣上、在生活上，并没有边界。你能找到他对于本专业的研究，也能找到他关于文学作品的批评，有时候，他又会研究跟自己领域遥远的学科。柳比歇夫不是一个刻板的人，但是他又做了这样一件刻板的事情，把自己的一生浓缩成了时间账本。</p></blockquote><h2 id="时间账本"><a href="#时间账本" class="headerlink" title="时间账本"></a>时间账本</h2><p>这是柳比歇夫  日记的一些特点：</p><ol><li>更像是 log/账本</li><li>每天记录 5-10 条</li><li>每月，每年统计时间都花在了哪里</li><li>使用方格本记录，方便花图制表</li><li>不带任何情感</li><li>所有文档都有编号可查，包括：论文，信笺，随笔等等</li><li>只记录分类/事件/时间花销</li><li>不只工作，还包括生活/休息/散步</li><li>制定下月/年/5 年计划</li><li>利用零散时间，散步/出行等等。</li><li>记录纯时间而非毛时间，按照他的统计毛时间会多出 20%左右</li><li>…</li></ol><p>确实，没人规定日记应该写成什么样。但柳比歇夫的日记看起来是最枯燥无味的，你会感觉这不是用来给人回看的，更像是用来做统计或者用来“时间倒流”的。在他的日记中分门别类的记录了每天做了什么并花了多少时间，并且是每天如此从不间断。</p><h2 id="时间感"><a href="#时间感" class="headerlink" title="时间感"></a>时间感</h2><p>在长时间的计算时间消耗的习惯下，柳比歇夫形成了精确评估时间的能力。在书中被称为时间感。这不是一种与生俱来的能力，是需要长时间训练下不自觉的养成的。这种能力有几个好处：</p><ol><li>查准确的评估之前某事的时间消耗</li><li>更准确的预估计划</li></ol><p>对于想高效利用时间的人来说，这无疑是趋之若鹜的。</p><h2 id="花多长时间形成自己的方法"><a href="#花多长时间形成自己的方法" class="headerlink" title="花多长时间形成自己的方法"></a>花多长时间形成自己的方法</h2><p>书中介绍 1916 年到 1972 年，柳比歇夫连续记录了 56 年。但这些年并不是一成不变的，在 1937 年他的方法才渐成熟。也就是说<strong>他花了 21 年的时间探索自己的时间管理方法</strong>，然后坚持了 35 年直到终老。你能想像吗？你会花 20 多年提升某种提升自己的方法吗？</p><p>从另外一点也可以说明他的日记方法不是一开始就形成的。作者提到在开始的第一年，日记中是包含感情和评论的。而在后来的不断改进中，这些内容就不再记录在这个时间账本中了。</p><h2 id="一生忠于年青时的选择"><a href="#一生忠于年青时的选择" class="headerlink" title="一生忠于年青时的选择"></a>一生忠于年青时的选择</h2><p>柳比歇夫在年青的时候就确定了他的奋斗目标——生物分类学。幸运的是，他不但学术上充满成就而且研究范围广博，最关键的是他享受他的一生并感到幸福。</p><p>看到这一部分的时候，我也问了自己几个问题：</p><ol><li>我有愿意投入一生奋斗的事业吗？是什么？</li><li>我的爱好是什么？</li><li>我感到幸福吗？</li></ol><p>至少到现在来看，我没有他那么幸运…, 继续努力吧。</p><p>另外呢，有几点是我没想清楚的：</p><ol><li>如果年青的时候选错了方向？或者奋斗一生还是无所得呢？</li><li>事业成就与幸福感在生命中的意义？</li></ol><h2 id="不总结的记录只是徒劳"><a href="#不总结的记录只是徒劳" class="headerlink" title="不总结的记录只是徒劳"></a>不总结的记录只是徒劳</h2><p>柳比歇夫每天/月/年都会做总结。每月总结要花1.5至3小时，下月计划1小时。年度总结的时间比较多，要花17到18小时。在总结中他全部回答了以下几个问题：</p><ol><li>时间都花在了哪里？</li><li>哪些时间花的比预期要多/少？</li></ol><p>在每件事情完结的时候，他都会记录上时间成本。然后，再与之前的计划的时间投入进行比对。柳比歇夫的计划执行率是非常高的，这有一部分功劳来自于超乎常人的“时间感”。总结是一个镜子，并不是所有人都愿意仔细的查看自己。有时是奖励，有时是批评。只有愿意正视自己然后不断改进自己的人都会品尝到精进的果实。只记录不进行统计和分析，那只是在浪费时间。时间长了，找不到做这件事的动力，就很容易放弃。</p><p>上面这些总结分析是柳比歇夫自己给自己用的。同时呢，他会把他的年度总结报告的摘抄以咨文的形式写给他的朋友们，在这里信里有丰富的工作报告，正在进行着的工作;有丰富的图表，有对工作的思考;还有对自己身体精神原因的分析。总之，不再像他的“账本”， 是有血有肉的。</p><h2 id="自省更重要"><a href="#自省更重要" class="headerlink" title="自省更重要"></a>自省更重要</h2><p>在书的前半部分一点一点的提示了柳比歇夫的时间管理法中关于如何记录/统计/分析的内容，而在书的后半部分呢重点描述了他的人格。我觉得这是恰如其分的，不可能只因为一个时间管理法就造成了他的成就。一个人的成就一定是多方面与众不同的因素相组合后产生的化学作用。</p><p>在这些“其它”内容中，我认为柳比歇夫的自省可能比他的时间管理法更重要一些。时间管理法是把一个不带任何修饰的真实的自己展示出来，但如果你不能正视/反省/改正那都是无济于事的。</p><h2 id="时间守则"><a href="#时间守则" class="headerlink" title="时间守则"></a>时间守则</h2><ol><li>不承担必须完成的任务</li><li>我不接受紧急的任务</li><li>一累了马上停止工作去休息</li><li>睡得很多，每天10小时左右</li><li>把累人的工作同愉快的工作结合在一起</li></ol><p>以上是柳比歇夫的一些守则，这些守则在现代的职场中不是全能够适用的。相比，可能更适用于能够独立工作者。而我觉得他的这些守则与他的时间管理法有可能是形成某种契约的，当他们全部满足的时候才能发挥最大效果。从这一点上讲，对于不同时期不同的个体，柳比歇夫时间管理法还是要因地制宜。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>另外在书中也提到他的另外一些人格：</p><ol><li>对很多领域或事物充满好奇和批判，发表了许多不同领域的文章</li><li>关于将资料分类整理，并把其当做是一种工作上的休息。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这本书我花了3小时40分钟读完一次。我读得应该算快，一是这本书和里面相关的知识之前有所学习，二是这本书的后半部分更多的是从人格的角度对他的刻画，这部分读的快些。读罢，柳比歇夫的一个立体形象出现在我的脑子里，而不是像以前只有一个描述时间管理方法的列表。总的来说，收获大！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编者的话&quot;&gt;&lt;a href=&quot;#编者的话&quot; class=&quot;headerlink&quot; title=&quot;编者的话&quot;&gt;&lt;/a&gt;编者的话&lt;/h2&gt;&lt;p&gt;读过编者的话这一章前内容，我有几个感受: 一是很久没看书了，时不时会心浮气燥。第二呢，这段时间自己也在写博客，深深的感觉到笔
      
    
    </summary>
    
    
    
      <category term="时间管理" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
      <category term="奇特的一生" scheme="http://yoursite.com/tags/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/"/>
    
      <category term="柳比歇夫" scheme="http://yoursite.com/tags/%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB/"/>
    
  </entry>
  
  <entry>
    <title>一步一步用 D3js 写一个 Line Chart</title>
    <link href="http://yoursite.com/2020/03/14/write-a-line-chart-using-d3/"/>
    <id>http://yoursite.com/2020/03/14/write-a-line-chart-using-d3/</id>
    <published>2020-03-14T11:25:15.000Z</published>
    <updated>2020-03-19T13:21:02.919Z</updated>
    
    <content type="html"><![CDATA[<a href="/2020/03/13/write-a-bar-chart-using-d3js/" title="上文">上文</a>介绍了如何用 D3js 写一个 bar chart。本文继承上文的知识点，并加以补充描述如何画一个基于时间序列为 Line Chart。<video src="/videos/linechart_demo.mov" autoplay loop="loop"></video><p>时间序列通常有几个常见的特点:</p><ol><li>x 轴为时间，可能是不同的时间粒度。</li><li>x 轴要注意格式的显示，由于时间字符串长度较大，可能要考虑巧妙的设计 ticks 和 tickFormat。</li><li>有时会用到动态实时刷新的处理</li><li>通过范围选定一个时间范围，然后进行钻取(drill down)</li><li>金融领域也使用时间序列，但在此基础上加了很多技术分析相关的显示组件。</li></ol><p>以下介绍一个所有领域通用的 Line Chart.</p><h2 id="step-by-step"><a href="#step-by-step" class="headerlink" title="step by step"></a>step by step</h2><h4 id="Axis"><a href="#Axis" class="headerlink" title="Axis"></a>Axis</h4><p> 首先先画轴。Y 轴使用的是<code>sacleLinear</code>。X 轴这里是时间序列所以要使用<code>scaleTime</code>。<code>scaleTime</code> 在缩放的时候是使用 Date 对象绽放成数值，这点需要注意。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = d3</span><br><span class="line">  .scaleTime()</span><br><span class="line">  .domain([data[<span class="number">0</span>].x <span class="keyword">as</span> <span class="built_in">Date</span>, data[data.length - <span class="number">1</span>].x <span class="keyword">as</span> <span class="built_in">Date</span>])</span><br><span class="line">  .range([margin.left, width - margin.right])</span><br></pre></td></tr></table></figure><p>轴的 tick 间隔也可以基于时间进行设置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.xAxis = d3</span><br><span class="line">  .axisBottom(<span class="keyword">this</span>.x)</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  .tickFormat(<span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> moment(d).format(<span class="string">'M-D'</span>))</span><br><span class="line">  .ticks(d3.timeDay.every(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>下面是显示效果：<br><img src="/images/linechart__axis.png" alt="d3 line chart axis"></p><h4 id="Series-amp-Tooltip"><a href="#Series-amp-Tooltip" class="headerlink" title="Series &amp; Tooltip"></a>Series &amp; Tooltip</h4><p>画 series 时要注意，拆线图是在 svg 上是一个 line，这样就不能直接响应某个数据点的 hover 事件。所以需要在线上再加一组点，然后将 hover 的处理作用在点上。当然这个点可以设置成可见与不可见的。对于不可见的情况感觉是 hover 上线上了，实际是透明的点响应了这个事件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">initSeries() &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">this</span>.config</span><br><span class="line">   <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> line = d3</span><br><span class="line">     .line()</span><br><span class="line">     .x(<span class="function">(<span class="params">d: <span class="built_in">any</span>, i: <span class="built_in">number</span></span>) =&gt;</span> that.x(d.x))</span><br><span class="line">     .y(<span class="function">(<span class="params">d: <span class="built_in">any</span>, i: <span class="built_in">number</span></span>) =&gt;</span> that.y(d.y))</span><br><span class="line">     .curve(d3.curveMonotoneX)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.series = <span class="keyword">this</span>.svg</span><br><span class="line">     .append(<span class="string">'path'</span>)</span><br><span class="line">     .datum(data) <span class="comment">// 10. Binds data to the line</span></span><br><span class="line">     .attr(<span class="string">'class'</span>, <span class="string">'line'</span>) <span class="comment">// Assign a class for styling</span></span><br><span class="line">     .attr(<span class="string">'d'</span>, line)</span><br><span class="line">     .attr(<span class="string">'fill'</span>, <span class="string">'none'</span>)</span><br><span class="line">     .attr(<span class="string">'stroke'</span>, Colors.primary)</span><br><span class="line">     .attr(<span class="string">'stroke-width'</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> dot = <span class="keyword">this</span>.svg</span><br><span class="line">     .selectAll(<span class="string">'.dot'</span>)</span><br><span class="line">     .data(data)</span><br><span class="line">     .enter()</span><br><span class="line">     .append(<span class="string">'circle'</span>) <span class="comment">// Uses the enter().append() method</span></span><br><span class="line">     .attr(<span class="string">'class'</span>, <span class="string">'dot'</span>) <span class="comment">// Assign a class for styling</span></span><br><span class="line">     .attr(<span class="string">'cx'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> that.x(moment(d.x).toDate())</span><br><span class="line">     &#125;)</span><br><span class="line">     .attr(<span class="string">'cy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> that.y(d.y)</span><br><span class="line">     &#125;)</span><br><span class="line">     .attr(<span class="string">'r'</span>, <span class="number">5</span>)</span><br><span class="line">     .attr(<span class="string">'fill'</span>, Colors.primary)</span><br><span class="line">     .attr(<span class="string">'stroke'</span>, <span class="string">'#fff'</span>)</span><br><span class="line">     .style(<span class="string">'cursor'</span>, <span class="string">'pointer'</span>)</span><br><span class="line">     .attr(<span class="string">'stroke-width'</span>, <span class="number">2</span>)</span><br><span class="line">     .on(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d: DataItem, i: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'y'</span>, that.y(d.y))</span><br><span class="line">       that.tooltip</span><br><span class="line">         .transition()</span><br><span class="line">         .duration(<span class="number">20</span>)</span><br><span class="line">         .style(<span class="string">'opacity'</span>, <span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> left = d3.event.pageX + <span class="number">20</span></span><br><span class="line">       <span class="keyword">if</span> (i &gt; data.length / <span class="number">2</span>) &#123;</span><br><span class="line">         left = d3.event.pageX - <span class="number">120</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> maxDomainValue = d3.max(data, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> d.y <span class="keyword">as</span> <span class="built_in">number</span>)</span><br><span class="line">       <span class="keyword">let</span> top = d3.event.pageY - <span class="number">60</span></span><br><span class="line">       <span class="keyword">if</span> (d.y &gt; maxDomainValue * <span class="number">0.66</span>) &#123;</span><br><span class="line">         top = d3.event.pageY + <span class="number">20</span></span><br><span class="line">       &#125;</span><br><span class="line">       that.tooltip</span><br><span class="line">         .html(moment(d.x).format(<span class="string">'YYYY-MM-DD'</span>) + <span class="string">'&lt;br /&gt;'</span> + d.y)</span><br><span class="line">         .style(<span class="string">'left'</span>, left + <span class="string">'px'</span>)</span><br><span class="line">         .style(<span class="string">'top'</span>, top + <span class="string">'px'</span>)</span><br><span class="line">         .style(<span class="string">'z-index'</span>, <span class="number">1</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">     .on(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d: DataItem, i: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">       that.tooltip.style(<span class="string">'opacity'</span>, <span class="number">0</span>).style(<span class="string">'z-index'</span>, <span class="number">-1</span>)</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>下面是显示效果：<br><img src="/images/linechart__series.png" alt="d3 line chart series"></p><h4 id="gridline"><a href="#gridline" class="headerlink" title="gridline"></a>gridline</h4><p>实现网格线的方式与<a href="write-a-bar-chart-using-d3js.md">上文</a>一致，不再赘述。</p><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><h4 id="实现范围选取"><a href="#实现范围选取" class="headerlink" title="实现范围选取"></a>实现范围选取</h4><p>d3js 可以实现一个方向或两个方向的 brush 来进行范围选取。在范围选取后可以通过<code>d3.brushSelection(this)</code>来获得选区.</p><p>有几点要注意：</p><ol><li>brush 层要放在 series 下，否则会出现 tooltip 不生效的现象。原来是 brush 占用了一个图层来实现 draging 的处理。有点像手机屏幕的原理，有显示层，有触摸层，有防护层。</li><li>通过<code>brush.extent()</code>限制选区的范围，这里需要把 margin 去掉</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> initBrush() &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> &#123; margin, width, height &#125; = <span class="keyword">this</span>.config</span><br><span class="line">    <span class="keyword">const</span> brushX = d3.brushX().extent([</span><br><span class="line">      [margin.left, margin.top],</span><br><span class="line">      [width - margin.right, height - margin.bottom]</span><br><span class="line">    ])</span><br><span class="line">    brushX</span><br><span class="line">      <span class="comment">// .on('start') // brush start event</span></span><br><span class="line">      .on(<span class="string">'brush'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> ext: <span class="built_in">any</span>[] = d3.brushSelection(<span class="keyword">this</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">'brushing'</span>,</span><br><span class="line">          ext.map(<span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> that.x.invert(e))</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">      .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> ext: <span class="built_in">any</span>[] = d3.brushSelection(<span class="keyword">this</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">'brush end'</span>,</span><br><span class="line">          ext.map(<span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> that.x.invert(e))</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">this</span>.svg</span><br><span class="line">      .append(<span class="string">'g'</span>)</span><br><span class="line">      .attr(<span class="string">'class'</span>, <span class="string">'brush'</span>)</span><br><span class="line">      .call(brushX)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/images/linechart__brush.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a href=&quot;/2020/03/13/write-a-bar-chart-using-d3js/&quot; title=&quot;上文&quot;&gt;上文&lt;/a&gt;介绍了如何用 D3js 写一个 bar chart。本文继承上文的知识点，并加以补充描述如何画一个基于时间序列为 Line Chart。

&lt;
      
    
    </summary>
    
    
    
      <category term="d3js" scheme="http://yoursite.com/tags/d3js/"/>
    
      <category term="数据可视化" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一步一步用 D3js 写一个Bar Chart</title>
    <link href="http://yoursite.com/2020/03/13/write-a-bar-chart-using-d3js/"/>
    <id>http://yoursite.com/2020/03/13/write-a-bar-chart-using-d3js/</id>
    <published>2020-03-13T14:53:33.000Z</published>
    <updated>2020-03-14T13:50:57.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍如何使用 d3js 创建一个 bar chart 组件（参考下视频）, 下面操起来！</p><video src="/videos/barchart_demo.mov" autoplay loop="loop"></video><h2 id="but-why"><a href="#but-why" class="headerlink" title="but why?"></a>but why?</h2><p>为什么要使用 d3 自己做图表组件呢？现在不是有很多 JS 组件库了吗？</p><p>我试着从以下几个原因来说明这个问题：</p><ol><li>图表库太多不知道选用哪个</li><li>有的图表好看，但只支持基本功能，定制能力很差</li><li>有的图表要求收费，否则显示图表 logo</li><li>费了好多时间找的一个图表库，可是有几个小的交互功能不支持，比如图例不能自定义或不能支持范围选取</li></ol><h4 id="图表没有“银弹”"><a href="#图表没有“银弹”" class="headerlink" title="图表没有“银弹”"></a>图表没有“银弹”</h4><p>越来越发现“没有银弹”是具有普适性的。<br>包含可视化的项目中，对图表的使用和依赖程度是不一样的。如果一个数据可视化项目要求比较简单，如：只使用了柱图，饼图，拆线图，且只需要图表的展示并不需要图表交互的话。可能世面上的大多数图表都是适用的。但我认为，这类项目不应该算叫数据可视化项目，就是在一个系统中集成了一些简单数据分析的功能。</p><p>如果是向天平的另一端看的话，想找到一个能够范围所有项目在数据分析领域的图表库的话，是很难的。一个原因大于这些图表库通过封装而提高了使用的便利性的同时，也损失掉了灵活性。虽然没个图表库都试图开发更多的配置接口，但有时也不如人意。</p><h4 id="找一个能够完全满足项目需求的图表库太难"><a href="#找一个能够完全满足项目需求的图表库太难" class="headerlink" title="找一个能够完全满足项目需求的图表库太难"></a>找一个能够完全满足项目需求的图表库太难</h4><p>图表开发的时候会有几个问题经常遇到：</p><ol><li>可以支持多数据系列</li><li>支持时间序列</li><li>可以切换数据的可见性，通过图表或图表中的 series</li><li>调整图表样式，如设置图表调色板，线条粗细等等</li><li>事件的处理，如点击图例，点击数据，范围选取数据</li><li>自定义 hover 文本</li><li>动画</li><li>多 y 轴</li><li>数据加载性能</li><li>自定义图表</li><li>…</li></ol><p>笔者不定周期的会审查一下市面上的图表库，目前没有得到一个使自己完全满意的。</p><h4 id="d3js-定制能力非常强大"><a href="#d3js-定制能力非常强大" class="headerlink" title="d3js 定制能力非常强大"></a>d3js 定制能力非常强大</h4><p>d3js 与其它图表的不同在于它开放给用户的是显示组件，而不是一个个已经封装好的图表。并且每个抽象的显示组件都可以进行编程式的定制。如：Axis, GridLine, Title, Series。从这一点上，d3js 所能做的可能会超越你的想象。我觉得也可以说 d3js 和其它的图表库不是一个使用级别上的东西。所以，也不太好与之相比较。</p><h4 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h4><p>我个人建议，如果是一个对数据可视化有一定要求的项目，就直接用 d3js DIY 组件好了，可能提供给你充足的灵活性和想象力。这样不会因为三方库不得不进行功能上的妥协。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h4 id="工程搭建"><a href="#工程搭建" class="headerlink" title="工程搭建"></a>工程搭建</h4><p>首先，需要搭建最小项目框架，包括：</p><ol><li><a href="https://webpack.js.org/guides/getting-started/" target="_blank" rel="noopener">配置基础</a></li><li><a href="https://webpack.js.org/guides/development/" target="_blank" rel="noopener">配置 webpack-dev-server 和 sourcemap</a></li><li><a href="https://webpack.js.org/guides/typescript/" target="_blank" rel="noopener">配置 typescript</a></li></ol><p>过程参考 webpack 教程就好。</p><h4 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h4><p>测试数据使用 faker 进行生成</p><p>!!!!<strong>这个地址一会要换成 tag testdata</strong><br><a href="https://github.com/johnnyhappy365/create-chart-using-d3/releases/tag/webpack%2Btypescript" target="_blank" rel="noopener">完整代码</a></p><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><p>接下来，开始画 Bar Chart 了。</p><h4 id="Axis"><a href="#Axis" class="headerlink" title="Axis"></a>Axis</h4><p>我们要画的是一个 horizontal bar chart。所以 Y 轴的对数是 categorial 的，而 X 轴的数据是 number。</p><p>X 轴要使用 scaleLinear, 而 Y 轴要使用 scaleBand。</p><p>主要代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> initAxis() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, width, height, margin &#125; = <span class="keyword">this</span>.config</span><br><span class="line">  <span class="keyword">const</span> maxDomainValue = d3.max(data, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> d.x <span class="keyword">as</span> <span class="built_in">number</span>)</span><br><span class="line">  <span class="keyword">this</span>.x = d3</span><br><span class="line">    .scaleLinear()</span><br><span class="line">    .domain([<span class="number">0</span>, maxDomainValue])</span><br><span class="line">    .range([margin.left, width - margin.right])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.xAxis = d3.axisBottom(<span class="keyword">this</span>.x)</span><br><span class="line">  <span class="keyword">this</span>.svg</span><br><span class="line">    .append(<span class="string">'g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">`translate(0, <span class="subst">$&#123;height - margin.bottom&#125;</span>)`</span>)</span><br><span class="line">    .call(<span class="keyword">this</span>.xAxis)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.y = d3</span><br><span class="line">    .scaleBand()</span><br><span class="line">    .domain(data.map(<span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> d.y) <span class="keyword">as</span> <span class="built_in">string</span>[])</span><br><span class="line">    .range([margin.top, height - margin.bottom])</span><br><span class="line">    .padding(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.yAxis = d3.axisLeft(<span class="keyword">this</span>.y)</span><br><span class="line">  <span class="keyword">this</span>.svg</span><br><span class="line">    .append(<span class="string">'g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">`translate(<span class="subst">$&#123;margin.left&#125;</span>, 0)`</span>)</span><br><span class="line">    .call(<span class="keyword">this</span>.yAxis)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示效果如下</p><p><img src="/images/barchart__axis.png" alt="d3 barchat axis"></p><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><p>然后是主角登录，画 Series，当前我们的用例中不包含多 Series 的情况，所以只需要画一个 bar 就行了。</p><p>在 SVG 中可以使用 rect 来实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> initSeries() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, margin &#125; = <span class="keyword">this</span>.config</span><br><span class="line">  <span class="keyword">this</span>.svg</span><br><span class="line">    .selectAll(<span class="string">'.bar'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">    .enter()</span><br><span class="line">    .append(<span class="string">'rect'</span>)</span><br><span class="line">    .classed(<span class="string">'bar'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'fill'</span>, Colors.primary)</span><br><span class="line">    .attr(<span class="string">'x'</span>, margin.left)</span><br><span class="line">    .attr(<span class="string">'y'</span>, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> <span class="keyword">this</span>.y(d.y))</span><br><span class="line">    .attr(<span class="string">'width'</span>, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> <span class="keyword">this</span>.x(d.x) - margin.left)</span><br><span class="line">    .attr(<span class="string">'height'</span>, <span class="keyword">this</span>.y.bandwidth())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bandwidth()</code> 可以取得 scaleBand 中计算出来的 band 宽度。显示效果如下</p><p><img src="/images/barchart__series.png" alt="d3 barchat series"></p><h4 id="Grid-Line"><a href="#Grid-Line" class="headerlink" title="Grid Line"></a>Grid Line</h4><p>加网线的方法可以参考这个<a href="http://bl.ocks.org/35degrees/23873a64ceec2390c400694b6a8b57d9" target="_blank" rel="noopener">例子</a></p><p>grid line 实际上就是一个 axis。在些基础上需要注意几点：</p><ol><li>tickFormat 设置成’’</li><li>设置 ticks(interval)</li><li>设置下样式</li><li>在 series 和 axis 的图层下方进行绘制</li><li>x/y 轴是否都需要加 grid line 适具体情况而定</li></ol><p>主要代码参考如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> initGridlines() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; height, margin &#125; = <span class="keyword">this</span>.config</span><br><span class="line">  <span class="keyword">const</span> gridX = d3</span><br><span class="line">    .axisBottom(<span class="keyword">this</span>.x)</span><br><span class="line">    .ticks(<span class="number">5</span>)</span><br><span class="line">    .tickSize(-height + margin.top + margin.bottom)</span><br><span class="line">    .tickFormat(<span class="function"><span class="params">()</span> =&gt;</span> <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">this</span>.svg</span><br><span class="line">    .append(<span class="string">'g'</span>)</span><br><span class="line">    .call(gridX)</span><br><span class="line">    .classed(<span class="string">'grid'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'color'</span>, Colors.grey)</span><br><span class="line">    .attr(<span class="string">'stroke-width'</span>, <span class="number">0.1</span>)</span><br><span class="line">    .attr(<span class="string">'stroke-dasharray'</span>, <span class="string">'3,3'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">`translate(0, <span class="subst">$&#123;height - margin.bottom&#125;</span>)`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/barchart__gridline.png" alt="d3 bar chart with gridline"></p><h4 id="Mid-Line"><a href="#Mid-Line" class="headerlink" title="Mid Line"></a>Mid Line</h4><p>通过上面的努力已经完成了一个静态 bar chart。如果不需要任何交互的话，这个图表已经是可以在项目中使用的了。</p><p>有时，为了提供数据分析的效率，会在些基础上绘制一些辅助线，比如：中位数线。</p><p>中线主要有几个点注意下就可以了:</p><ol><li>使用<code>d3.median()</code>计算中位数，d3 也提供了其它基础的统计方法，如四分位数和平均数等</li><li>在 svg 画一个 line, 显示中位数线</li><li>在 svg 画一个 text, 显示数值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> initMidLine() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, margin, height &#125; = <span class="keyword">this</span>.config</span><br><span class="line">  <span class="keyword">const</span> midValue = d3.median(data.map(<span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> d.x <span class="keyword">as</span> <span class="built_in">number</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.svg</span><br><span class="line">    .append(<span class="string">'line'</span>)</span><br><span class="line">    .classed(<span class="string">'mid'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'stroke'</span>, Colors.secondary)</span><br><span class="line">    .attr(<span class="string">'stroke-width'</span>, <span class="number">2</span>)</span><br><span class="line">    .attr(<span class="string">'x1'</span>, <span class="keyword">this</span>.x(midValue))</span><br><span class="line">    .attr(<span class="string">'x2'</span>, <span class="keyword">this</span>.x(midValue))</span><br><span class="line">    .attr(<span class="string">'y1'</span>, margin.top)</span><br><span class="line">    .attr(<span class="string">'y2'</span>, height - margin.bottom)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add text</span></span><br><span class="line">  <span class="keyword">this</span>.svg</span><br><span class="line">    .append(<span class="string">'text'</span>)</span><br><span class="line">    .classed(<span class="string">'mid-text'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'x'</span>, <span class="keyword">this</span>.x(midValue) + <span class="number">2</span>)</span><br><span class="line">    .attr(<span class="string">'y'</span>, margin.top)</span><br><span class="line">    .attr(<span class="string">'width'</span>, <span class="number">20</span>)</span><br><span class="line">    .attr(<span class="string">'height'</span>, <span class="number">10</span>)</span><br><span class="line">    .attr(<span class="string">'font-size'</span>, <span class="string">'10px'</span>)</span><br><span class="line">    .attr(<span class="string">'font-family'</span>, <span class="string">'sans-serif'</span>)</span><br><span class="line">    .style(<span class="string">'fill'</span>, Colors.secondary)</span><br><span class="line">    .text(<span class="string">`mid: <span class="subst">$&#123;midValue&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/barchart__mid.png" alt="d3 bar chart with mid value"></p><h4 id="Responsive"><a href="#Responsive" class="headerlink" title="Responsive"></a>Responsive</h4><p>有一个隐性需求是图表经常要自适应屏幕的大小。svg 可能通过以下代码实现在 block 容器中自适应大小，并且可以根据屏幕尺寸的改变而自动按比例进行缩放。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> initSvg() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; selector, width, height &#125; = <span class="keyword">this</span>.config</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.svg = d3</span><br><span class="line">    .select(selector)</span><br><span class="line">    .append(<span class="string">'div'</span>)</span><br><span class="line">    .classed(<span class="string">'chart-wrapper'</span>, <span class="literal">true</span>)</span><br><span class="line">    .style(<span class="string">'display'</span>, <span class="string">'inline-block'</span>)</span><br><span class="line">    .style(<span class="string">'position'</span>, <span class="string">'relative'</span>)</span><br><span class="line">    .style(<span class="string">'width'</span>, <span class="string">'100%'</span>)</span><br><span class="line">    .style(<span class="string">'padding-bottom'</span>, <span class="string">'100%'</span>)</span><br><span class="line">    .style(<span class="string">'vertical-align'</span>, <span class="string">'top'</span>)</span><br><span class="line">    .style(<span class="string">'overflow'</span>, <span class="string">'hidden'</span>)</span><br><span class="line">    <span class="comment">// Container class to make it responsive.</span></span><br><span class="line">    .append(<span class="string">'svg'</span>)</span><br><span class="line">    .attr(<span class="string">'preserveAspectRatio'</span>, <span class="string">'xMinYMin meet'</span>)</span><br><span class="line">    .attr(<span class="string">'viewBox'</span>, <span class="string">`0 0 <span class="subst">$&#123;width&#125;</span> <span class="subst">$&#123;height&#125;</span>`</span>)</span><br><span class="line">    .style(<span class="string">'display'</span>, <span class="string">'inline-block'</span>)</span><br><span class="line">    .style(<span class="string">'position'</span>, <span class="string">'absolute'</span>)</span><br><span class="line">    .style(<span class="string">'top'</span>, <span class="string">'0'</span>)</span><br><span class="line">    .style(<span class="string">'left'</span>, <span class="string">'0'</span>)</span><br><span class="line">  <span class="comment">// .style('background-color', Colors.grey)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>通过 d3js 可以很方便的实现想要的交互功能。在这里我们实现最常用的几个 bar chart 的交互：</p><ol><li>鼠标悬停在数据上进行高亮，并显示 tooltip 数值</li><li>点击事件</li></ol><p>使用<code>on</code>进行事件监听，<code>click</code> 事件用来响应点击。hover 的处理包含进入和退出需要监听 <code>mouseover</code> 和 <code>mouseout</code>。另外，hover 的处理要加上 animation，不然的话状态切换会有些生硬。修改后的<code>initSeries</code>如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> initSeries() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, margin &#125; = <span class="keyword">this</span>.config</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">this</span>.series = <span class="keyword">this</span>.svg</span><br><span class="line">    .selectAll(<span class="string">'.bar'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">    .enter()</span><br><span class="line">    .append(<span class="string">'rect'</span>)</span><br><span class="line">    .classed(<span class="string">'bar'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'fill'</span>, Colors.primary)</span><br><span class="line">    .attr(<span class="string">'x'</span>, margin.left + <span class="number">1</span>) <span class="comment">// forbiden overlay by series</span></span><br><span class="line">    .attr(<span class="string">'y'</span>, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> <span class="keyword">this</span>.y(d.y))</span><br><span class="line">    .attr(<span class="string">'width'</span>, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> <span class="keyword">this</span>.x(d.x) - margin.left)</span><br><span class="line">    .attr(<span class="string">'height'</span>, <span class="keyword">this</span>.y.bandwidth())</span><br><span class="line">    .on(<span class="string">'click'</span>, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> alert(<span class="string">`click <span class="subst">$&#123;d.y&#125;</span>`</span>))</span><br><span class="line">    .on(<span class="string">'mouseover.bar'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d: DataItem, i: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">      that.setSeriesColor(Colors.grey)</span><br><span class="line">      d3.select(<span class="keyword">this</span>)</span><br><span class="line">        .transition()</span><br><span class="line">        .duration(<span class="number">200</span>)</span><br><span class="line">        .attr(<span class="string">'fill'</span>, Colors.primary)</span><br><span class="line"></span><br><span class="line">      that.seriesLabel</span><br><span class="line">        .filter(<span class="function">(<span class="params">d: DataItem, index: <span class="built_in">number</span></span>) =&gt;</span> index === i)</span><br><span class="line">        .transition()</span><br><span class="line">        .duration(<span class="number">200</span>)</span><br><span class="line">        .attr(<span class="string">'opacity'</span>, <span class="number">0.9</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'mouseout.bar'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d: DataItem, i: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">      that.setSeriesColor(Colors.primary)</span><br><span class="line">      that.seriesLabel</span><br><span class="line">        .transition()</span><br><span class="line">        .duration(<span class="number">200</span>)</span><br><span class="line">        .attr(<span class="string">'opacity'</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.seriesLabel = <span class="keyword">this</span>.svg</span><br><span class="line">    .selectAll(<span class="string">'.series-label'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">    .enter()</span><br><span class="line">    .append(<span class="string">'text'</span>)</span><br><span class="line">    .classed(<span class="string">'series-label'</span>, <span class="literal">true</span>)</span><br><span class="line">    .text(<span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> d.x)</span><br><span class="line">    .attr(<span class="string">'fill'</span>, Colors.text)</span><br><span class="line">    .attr(<span class="string">'x'</span>, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> <span class="keyword">this</span>.x(d.x) + <span class="number">4</span>) <span class="comment">// forbiden overlay by series</span></span><br><span class="line">    .attr(<span class="string">'y'</span>, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> <span class="keyword">this</span>.y(d.y) + <span class="keyword">this</span>.y.bandwidth() / <span class="number">2</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, <span class="function">(<span class="params">d: DataItem</span>) =&gt;</span> <span class="keyword">this</span>.x(d.x) - margin.left)</span><br><span class="line">    .attr(<span class="string">'dominant-baseline'</span>, <span class="string">'central'</span>)</span><br><span class="line">    .attr(<span class="string">'height'</span>, <span class="keyword">this</span>.y.bandwidth())</span><br><span class="line">    .attr(<span class="string">'font-size'</span>, <span class="string">'8px'</span>)</span><br><span class="line">    .attr(<span class="string">'font-family'</span>, <span class="string">'sans-serif'</span>)</span><br><span class="line">    .attr(<span class="string">'opacity'</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/barchart__hover.png" alt="d3 bar chart with highlight"></p><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>最好一步，把一些可重用的配置抽取出来，一个图表组件就可能在项目中使用了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BarChart(&#123;</span><br><span class="line">  selector: <span class="string">'#chart-1'</span>,</span><br><span class="line">  data: testdata.data1(),</span><br><span class="line">  showMidLine: <span class="literal">false</span>,</span><br><span class="line">  margin: &#123;</span><br><span class="line">    bottom: <span class="number">20</span>,</span><br><span class="line">    left: <span class="number">200</span>,</span><br><span class="line">    top: <span class="number">20</span>,</span><br><span class="line">    right: <span class="number">20</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onClick: <span class="function"><span class="params">d</span> =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文介绍如何使用 d3js 创建一个 bar chart 组件（参考下视频）, 下面操起来！&lt;/p&gt;

&lt;video src=&quot;/video
      
    
    </summary>
    
    
    
      <category term="d3js" scheme="http://yoursite.com/tags/d3js/"/>
    
      <category term="数据可视化" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>material design motion pattern</title>
    <link href="http://yoursite.com/2020/03/02/material-design-motion-pattern/"/>
    <id>http://yoursite.com/2020/03/02/material-design-motion-pattern/</id>
    <published>2020-03-02T03:36:18.000Z</published>
    <updated>2020-03-02T05:31:40.381Z</updated>
    
    <content type="html"><![CDATA[<p>The motion system is a set of transition patterns that can help users understand and navigate an app.</p><p>Material Design’s motion system is comprised of four patterns for transitioning between components or full-screen views. The patterns are decided to help users navigate and understand an app by reinforcing relationships between UI elements.</p><p>The transition patterns are:<br>Container transform<br>Shared axis<br>Fade through<br>Fade</p><h2 id="how-to-select-a-patter"><a href="#how-to-select-a-patter" class="headerlink" title="how to select a patter?"></a>how to select a patter?</h2><p>Consider the following when determining which transition pattern is appropriate for a given use case.</p><h3 id="Persistent-containers"><a href="#Persistent-containers" class="headerlink" title="Persistent containers"></a>Persistent containers</h3><p>Is a persistent container part of the transition?</p><p>Containers are shapes used to represent enclosed areas, such as buttons, lists, card surfaces. If there’s a container that’s a <a href="#">persistent element</a> in the transition, choose the container transform pattern.</p><video src="https://storage.googleapis.com/spec-host/mio-staging%2Fmio-design%2F1581631970573%2Fassets%2F15TdN-zv3cqO5AUyS5SrS6I2tbgxSDFPv%2Fpick-container-transform-2col.mp4" controls="controls"></video><h3 id="Element-types"><a href="#Element-types" class="headerlink" title="Element types"></a>Element types</h3><p><a href="https://material.io/design/motion/choreography.html#sequencing" target="_blank" rel="noopener">link</a></p><p>UI components in a sequence are categorized as outgoing, incoming, persistent.<br>Outgoing elements exit the screen<br>Ongoing elements enter the screen.<br>Persistent elements start and end on screen.</p><p>In the demo, the persistent element(container) is blue; the outgoing element(list item content) is red; and the incoming element(details page content) is green.</p><video src="https://storage.cloud.google.com/non-spec-apps/mio-direct-embeds/videos/SEQUENCING%20ELEMENTS.mp4" controls="controls"></video><h3 id="Relationships"><a href="#Relationships" class="headerlink" title="Relationships"></a>Relationships</h3><p>Is there a spatial or navigational relationship between UI elements?</p><p>If the elements in a transition do not have a persistent container, there may be a spatial relationship to emphasize, such as elements in a vertical or horizontal layout. Or, there might be a navigational relationship between elements, such as moving between peers or between levels in an app. If a spatial or navigational relationship exists between elements, choose the shared axis pattern.</p><video src="https://storage.googleapis.com/spec-host/mio-staging%2Fmio-design%2F1581631970573%2Fassets%2F1xyJ78lqkctwFliSv7mtBKhxZ_g4pjglh%2Fpick-shared-axis-2col.mp4" controls="controls"></video><p>When a relationship between UI components is insignificant or does not exist, the fade through pattern is better suited.</p><video src="https://storage.googleapis.com/spec-host/mio-staging%2Fmio-design%2F1581631970573%2Fassets%2F15Y38NqhiCSUX_Fh253WzhHLqZbsskk-g%2Fpick-fade-through-2col.mp4" controls="controls"></video><p>The fade through pattern are applied to UI components without a strong relationship to each other. Such as detinations in the bottom navigation.</p><h3 id="Entering-and-Exiting"><a href="#Entering-and-Exiting" class="headerlink" title="Entering and Exiting"></a>Entering and Exiting</h3><p>Does a UI component enter or exit the screen?</p><p>Oftentimes a UI element simply needs to enter or exit the screen. For entering and exiting elements, the fade pattern is best suited.</p><video src="https://storage.googleapis.com/spec-host/mio-staging%2Fmio-design%2F1581631970573%2Fassets%2F15U7Uh31BRkOrM2RL7zDrDgM3dPrsU_Ue%2Fpick-fade-2col.mp4" controls="controls"></video><p>The fade pattern can be applied to UI element that enter or exit the screen, such as dialogs.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The motion system is a set of transition patterns that can help users understand and navigate an app.&lt;/p&gt;
&lt;p&gt;Material Design’s motion sys
      
    
    </summary>
    
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
      <category term="MaterialDesign" scheme="http://yoursite.com/tags/MaterialDesign/"/>
    
  </entry>
  
  <entry>
    <title>程序员如何提高英文水平</title>
    <link href="http://yoursite.com/2020/02/24/how-to-improve-my-english/"/>
    <id>http://yoursite.com/2020/02/24/how-to-improve-my-english/</id>
    <published>2020-02-24T04:54:36.000Z</published>
    <updated>2020-03-02T05:30:22.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>作为一个程序员，英语对我来说太重要了。很多问题，在中文环境下找不到解决方案，但在英文环境下可以。第二，有很多新的技术或小众技术第一时间都是英文资料。所以，不会英文，解决问题的速度要比别人慢。掌握新技能的速度也要比别人慢。</p><p>还好，我对英文技术类文字的阅读没什么障碍，可能也是多看一直查阅练就的。但书写/口语/听力就还是大学毕业那个水平了，一直没什么长进。因此，我写了这个文章谈谈我近期的一些提高口语/书写/听力的一些思路和尝试。</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><h4 id="将自己最大限度沉浸在英文环境中"><a href="#将自己最大限度沉浸在英文环境中" class="headerlink" title="将自己最大限度沉浸在英文环境中"></a>将自己最大限度沉浸在英文环境中</h4><p>文字输入上，我的场景有写代码，写代码注释，写需求说明，写 bug 描述，画原型图，写原型图 comment，与国人聊天，国内论坛发贴等。针对尽可能的将自己置身于英文环境  中我做了以下几件事：</p><ol><li>将 mac 换成英文系统</li><li>写代码注释和 git commit message 使用英文。这有另外一个好处是不用切换输入法，所以写的更快。</li><li>写需求说明和 bug 描述的时候，在项目允许的情况下（因为我是独立开发，所以自己允许  自己就行了），使用英文。</li><li>原型图 comment，使用英文</li><li>写 blog，英文中文双语。先写中文，然后自己翻译成英文。</li><li>写 git documenation 使用双语，方法同第 5 条。</li></ol><h4 id="使用-grammerly-提升文笔"><a href="#使用-grammerly-提升文笔" class="headerlink" title="使用 grammerly 提升文笔"></a>使用 grammerly 提升文笔</h4><p>平时写英文的时候可能不太主意语法或用词，这样写出来的东西只能自己看懂。如果一直这样，即使能够流程的使用英文进行描述了，没法与人沟通也是没有意义的。在认识到这点之后，我买了<a href="http://grammarly.com" target="_blank" rel="noopener">grammerly</a>会员，可以对语法/用词进行分析，并给出提示。能帮助你输出更易懂，更通顺的表达。</p><h4 id="口语提升"><a href="#口语提升" class="headerlink" title="口语提升"></a>口语提升</h4><p>我练习口语的目的非常明确，期望能够以后能够找到一个海外远程的工作机会或兼职机会。因此，需要具备如下技能：</p><ol><li>可以听懂老外的关于工作描述的内容，能够正常的进行视频会议</li><li>能够汇报自己的工作，表达自己的想法</li><li>能够针对需求进行讨论</li><li>能够针对技术进行讨论</li></ol><p>关于这块如果有针对性的练习和提升，我目前想的还不是很清楚。我是通过两个手段：</p><ol><li>使用英文流利说 APP 的定制课程，系统的提升通用英文能力。可能和上面说的针对性不是特别强，比如有些时候会讲些科学啊，吃饭啊，参观什么的。但这些属于基础类的。</li><li>英文是否流利体现在你能用英文自如表达的主题的数量（出处 zhihu live)。如果你只能谈论电影，你不算流利。我需要做到的是能够流程谈论上述内容。因此，在平时查阅英文资料的时候，我会留意一些不错的技术类文章，然后经过修改后，进行背诵。</li></ol><h2 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h2><p>关于听力，不能只听地道的美音。也要能听不同口音的英文，这里英式的我觉得需求不是很大，主要是那边的客户可能会比较少。我计划在使用英文流利说半年左右的时间后，也就是今年年中开始找平台与不同口音的老外进行对话练习。</p><p>目前，会在零散时间泛听一些 youtube 上的技术类视频，这类视频内容对于我来说没有太多的生词，而且讲解的人的口音各异，我觉得比较适合作为我现阶段的听力材料。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>写这个 post 也是想给自己立个 flag, 来年今日看效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;作为一个程序员，英语对我来说太重要了。很多问题，在中文环境下找不到解决方案，但在英文环境下可以。第二，有很多新的技术或小众技术第一时
      
    
    </summary>
    
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/02/24/hello-world/"/>
    <id>http://yoursite.com/2020/02/24/hello-world/</id>
    <published>2020-02-24T04:49:14.900Z</published>
    <updated>2020-02-24T04:49:14.900Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
